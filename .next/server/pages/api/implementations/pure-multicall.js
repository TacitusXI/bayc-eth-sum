"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/implementations/pure-multicall";
exports.ids = ["pages/api/implementations/pure-multicall"];
exports.modules = {

/***/ "ethers":
/*!*************************!*\
  !*** external "ethers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("ethers");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fpure-multicall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fpure-multicall.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fpure-multicall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fpure-multicall.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/implementations/pure-multicall.js */ \"(api)/./pages/api/implementations/pure-multicall.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/implementations/pure-multicall\",\n        pathname: \"/api/implementations/pure-multicall\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_implementations_pure_multicall_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcGxlbWVudGF0aW9ucyUyRnB1cmUtbXVsdGljYWxsJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZpbXBsZW1lbnRhdGlvbnMlMkZwdXJlLW11bHRpY2FsbC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMwRTtBQUMxRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMseUVBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHlFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JheWMtZXRoLXN1bS8/OTFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2ltcGxlbWVudGF0aW9ucy9wdXJlLW11bHRpY2FsbC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2ltcGxlbWVudGF0aW9ucy9wdXJlLW11bHRpY2FsbFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2ltcGxlbWVudGF0aW9ucy9wdXJlLW11bHRpY2FsbFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fpure-multicall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fpure-multicall.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/implementations/pure-multicall.js":
/*!*****************************************************!*\
  !*** ./pages/api/implementations/pure-multicall.js ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"ethers\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_1__]);\naxios__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Pure-Multicall implementation - uses multicall for ALL RPC queries\n\n\n\n\n// Constants\nconst BAYC_CONTRACT_ADDRESS = \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\";\nconst ETHERSCAN_API_URL = \"https://api.etherscan.io/api\";\nconst ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || \"\";\nconst ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY || \"\";\nconst ALCHEMY_API_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`;\n// Multicall Contract Addresses\nconst MULTICALL_ADDRESS = \"0xcA11bde05977b3631167028862bE2a173976CA11\"; // Multicall3 contract\n// ABI for Multicall3\nconst MULTICALL_ABI = [\n    \"function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)\",\n    \"function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) view returns (tuple(bool success, bytes returnData)[] returnData)\",\n    \"function getEthBalance(address addr) view returns (uint256 balance)\"\n];\n// ABI for ERC721 (BAYC)\nconst BAYC_ABI = [\n    \"function totalSupply() view returns (uint256)\",\n    \"function ownerOf(uint256 tokenId) view returns (address)\"\n];\n// Results file path\nconst RESULTS_FILE_PATH = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"results.json\");\n// Provider and contract initialization\nlet provider = null;\nlet multicallContract = null;\n/**\n * Initialize provider\n */ const initProvider = ()=>{\n    if (provider) return provider;\n    console.log(\"Initializing provider...\");\n    if (ALCHEMY_API_KEY) {\n        try {\n            console.log(\"Using Alchemy provider\");\n            provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.providers.JsonRpcProvider(ALCHEMY_API_URL);\n            return provider;\n        } catch (error) {\n            console.error(\"Failed to create provider:\", error.message);\n            provider = null;\n        }\n    } else {\n        console.error(\"No Alchemy API key provided!\");\n    }\n    throw new Error(\"Failed to initialize provider\");\n};\n/**\n * Initialize Multicall contract\n */ const initMulticall = ()=>{\n    if (multicallContract) return multicallContract;\n    const p = provider || initProvider();\n    try {\n        multicallContract = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.Contract(MULTICALL_ADDRESS, MULTICALL_ABI, p);\n        console.log(\"Multicall contract initialized\");\n        return multicallContract;\n    } catch (error) {\n        console.error(\"Failed to initialize multicall contract:\", error.message);\n        return null;\n    }\n};\n/**\n * Save results to file for persistence\n */ async function saveResultsToFile(implementationId, timestamp, result) {\n    try {\n        // Create directory if it doesn't exist\n        const dir = path__WEBPACK_IMPORTED_MODULE_3___default().dirname(RESULTS_FILE_PATH);\n        if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        // Read existing results or create new object\n        let results = {};\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            results = JSON.parse(fileContent);\n        }\n        // Add new result\n        if (!results[implementationId]) {\n            results[implementationId] = {};\n        }\n        // Convert BigNumber to string for JSON storage\n        const resultToSave = {\n            ...result,\n            totalWei: result.totalWei?.toString(),\n            executionTime: result.executionTime,\n            timestamp: new Date().toISOString()\n        };\n        results[implementationId][timestamp] = resultToSave;\n        // Write back to file\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(RESULTS_FILE_PATH, JSON.stringify(results, null, 2));\n        console.log(`Results saved to ${RESULTS_FILE_PATH}`);\n    } catch (error) {\n        console.error(\"Error saving results to file:\", error);\n    }\n}\n/**\n * Get previous results from cache file\n */ function getPreviousResults() {\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            return JSON.parse(fileContent);\n        }\n    } catch (error) {\n        console.error(\"Error reading previous results:\", error);\n    }\n    return {};\n}\n/**\n * Find block number at specific timestamp using Etherscan API\n */ async function getBlockNumberAtTimestamp(timestamp) {\n    try {\n        console.log(`Looking up block number for timestamp ${timestamp} using Etherscan API...`);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(ETHERSCAN_API_URL, {\n            params: {\n                module: \"block\",\n                action: \"getblocknobytime\",\n                timestamp,\n                closest: \"before\",\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        if (response.data.status !== \"1\") {\n            throw new Error(`Etherscan API error: ${response.data.message}`);\n        }\n        const blockNumber = parseInt(response.data.result);\n        console.log(`Found block #${blockNumber} for timestamp ${timestamp}`);\n        return blockNumber;\n    } catch (error) {\n        console.error(\"Error getting block number:\", error);\n        throw error;\n    }\n}\n/**\n * Get BAYC total supply using multicall\n */ async function getTotalSupply(blockNumber) {\n    if (!multicallContract) {\n        multicallContract = initMulticall();\n    }\n    console.log(`Getting BAYC totalSupply at block ${blockNumber} using multicall...`);\n    const baycInterface = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.Interface(BAYC_ABI);\n    const callData = baycInterface.encodeFunctionData(\"totalSupply\", []);\n    const calls = [\n        {\n            target: BAYC_CONTRACT_ADDRESS,\n            callData\n        }\n    ];\n    const [, returnData] = await multicallContract.aggregate(calls, {\n        blockTag: blockNumber\n    });\n    const totalSupply = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(returnData[0]).toNumber();\n    console.log(`BAYC totalSupply: ${totalSupply}`);\n    return totalSupply;\n}\n/**\n * Get BAYC token owners using multicall in batches\n */ async function getTokenOwners(totalSupply, blockNumber) {\n    if (!multicallContract) {\n        multicallContract = initMulticall();\n    }\n    console.log(`Getting owners for all ${totalSupply} tokens using multicall in batches...`);\n    const baycInterface = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.Interface(BAYC_ABI);\n    const owners = new Set();\n    const batchSize = 50; // Process in batches of 50 tokens\n    for(let i = 1; i <= totalSupply; i += batchSize){\n        const end = Math.min(i + batchSize - 1, totalSupply);\n        console.log(`Processing tokens ${i} to ${end}...`);\n        // Create calls for this batch\n        const calls = [];\n        for(let tokenId = i; tokenId <= end; tokenId++){\n            calls.push({\n                target: BAYC_CONTRACT_ADDRESS,\n                allowFailure: true,\n                callData: baycInterface.encodeFunctionData(\"ownerOf\", [\n                    tokenId\n                ])\n            });\n        }\n        // Execute multicall\n        const results = await multicallContract.aggregate3(calls, {\n            blockTag: blockNumber\n        });\n        // Process results\n        for(let j = 0; j < results.length; j++){\n            const result = results[j];\n            if (result.success) {\n                try {\n                    const owner = baycInterface.decodeFunctionResult(\"ownerOf\", result.returnData)[0].toLowerCase();\n                    if (owner !== \"0x0000000000000000000000000000000000000000\") {\n                        owners.add(owner);\n                    }\n                } catch (error) {\n                    console.warn(`Failed to decode owner for token ${i + j}:`, error.message);\n                }\n            } else {\n                console.warn(`Token ${i + j} ownership check failed`);\n            }\n        }\n    }\n    const holderArray = Array.from(owners);\n    console.log(`Found ${holderArray.length} unique holders`);\n    return holderArray;\n}\n/**\n * Get ETH balances using multicall\n */ async function getEthBalancesMulticall(addresses, blockNumber) {\n    if (!multicallContract) {\n        multicallContract = initMulticall();\n    }\n    console.log(`Getting ETH balances for ${addresses.length} addresses with Multicall...`);\n    // Break addresses into chunks of 100 to avoid gas limit issues\n    const chunkSize = 100;\n    let totalBalance = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0);\n    for(let i = 0; i < addresses.length; i += chunkSize){\n        const chunk = addresses.slice(i, i + chunkSize);\n        console.log(`Processing chunk ${Math.floor(i / chunkSize) + 1}/${Math.ceil(addresses.length / chunkSize)} (${chunk.length} addresses)`);\n        // Create calls array for multicall\n        const calls = chunk.map((address)=>({\n                target: MULTICALL_ADDRESS,\n                callData: multicallContract.interface.encodeFunctionData(\"getEthBalance\", [\n                    address\n                ])\n            }));\n        // Execute multicall\n        const [, returnData] = await multicallContract.aggregate(calls, {\n            blockTag: blockNumber\n        });\n        // Process results\n        for(let j = 0; j < returnData.length; j++){\n            try {\n                const balance = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.defaultAbiCoder.decode([\n                    \"uint256\"\n                ], returnData[j])[0];\n                totalBalance = totalBalance.add(balance);\n            } catch (error) {\n                console.error(`Error decoding balance for address ${j + i}:`, error.message);\n            }\n        }\n    }\n    return totalBalance;\n}\n/**\n * Main function to get total ETH value of all BAYC holders\n */ async function getTotalEthValueOfHolders(timestamp) {\n    const startTime = Date.now();\n    try {\n        // Initialize provider and multicall contract\n        provider = initProvider();\n        multicallContract = initMulticall();\n        // Step 1: Get block number at timestamp\n        const blockNumber = await getBlockNumberAtTimestamp(timestamp);\n        // Step 2: Get total supply using multicall\n        const totalSupply = await getTotalSupply(blockNumber);\n        // Step 3: Get token owners using multicall\n        const holders = await getTokenOwners(totalSupply, blockNumber);\n        // Step 4: Get ETH balances using multicall\n        const totalWei = await getEthBalancesMulticall(holders, blockNumber);\n        const totalEth = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.formatEther(totalWei);\n        const executionTime = Date.now() - startTime;\n        console.log(`Total ETH value: ${totalEth} ETH (execution time: ${executionTime}ms)`);\n        const result = {\n            totalEth,\n            totalWei,\n            holderCount: holders.length,\n            sampledHolders: holders.length,\n            executionTime,\n            block: blockNumber,\n            implementation: \"pure-multicall\"\n        };\n        // Save results for persistence\n        await saveResultsToFile(\"pure-multicall\", timestamp, result);\n        return result;\n    } catch (error) {\n        console.error(\"Error calculating total ETH value:\", error);\n        const executionTime = Date.now() - startTime;\n        return {\n            error: error.message,\n            blockNumber: 0,\n            holderCount: 0,\n            totalWei: ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0),\n            totalEth: \"0\",\n            executionTime,\n            implementation: \"pure-multicall-error\"\n        };\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const { timestamp, useCache } = req.body;\n        if (!timestamp) {\n            return res.status(400).json({\n                message: \"Timestamp is required\"\n            });\n        }\n        // Check if we have cached results\n        if (useCache !== false) {\n            const previousResults = getPreviousResults();\n            const cachedResult = previousResults?.[\"pure-multicall\"]?.[timestamp];\n            if (cachedResult) {\n                console.log(`Using cached result for timestamp ${timestamp}`);\n                // Convert string back to BigNumber for consistency\n                if (cachedResult.totalWei) {\n                    cachedResult.totalWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(cachedResult.totalWei);\n                }\n                return res.status(200).json({\n                    ...cachedResult,\n                    fromCache: true\n                });\n            }\n        }\n        const result = await getTotalEthValueOfHolders(timestamp);\n        return res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error in pure-multicall API handler:\", error);\n        return res.status(500).json({\n            message: \"Error processing request\",\n            error: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/implementations/pure-multicall.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fpure-multicall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fpure-multicall.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();