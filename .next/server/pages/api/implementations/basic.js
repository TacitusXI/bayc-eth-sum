"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/implementations/basic";
exports.ids = ["pages/api/implementations/basic"];
exports.modules = {

/***/ "ethers":
/*!*************************!*\
  !*** external "ethers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("ethers");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fbasic&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fbasic.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fbasic&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fbasic.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/implementations/basic.js */ \"(api)/./pages/api/implementations/basic.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/implementations/basic\",\n        pathname: \"/api/implementations/basic\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_implementations_basic_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcGxlbWVudGF0aW9ucyUyRmJhc2ljJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZpbXBsZW1lbnRhdGlvbnMlMkZiYXNpYy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNpRTtBQUNqRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0VBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JheWMtZXRoLXN1bS8/ZWM5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2ltcGxlbWVudGF0aW9ucy9iYXNpYy5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2ltcGxlbWVudGF0aW9ucy9iYXNpY1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2ltcGxlbWVudGF0aW9ucy9iYXNpY1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fbasic&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fbasic.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/implementations/basic.js":
/*!********************************************!*\
  !*** ./pages/api/implementations/basic.js ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"ethers\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_1__]);\naxios__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/basic.js\n\n\n\n\n// ─────────────────────────────────────────────────────────────────────────────\n// Constants & configuration\n// ─────────────────────────────────────────────────────────────────────────────\nconst BAYC_CONTRACT_ADDRESS = \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\";\nconst ETHERSCAN_API_URL = \"https://api.etherscan.io/api\";\nconst ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || \"\";\nconst ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY || \"\";\nconst ALCHEMY_API_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`;\n// Define the results file path\nconst RESULTS_FILE_PATH = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"results.json\");\n// ERC-721 ABI bits we need\nconst BAYC_ERC721_ABI = [\n    \"function totalSupply() view returns (uint256)\",\n    \"function ownerOf(uint256 tokenId) view returns (address)\"\n];\n// ─────────────────────────────────────────────────────────────────────────────\n// Provider & Contract Initialization\n// ─────────────────────────────────────────────────────────────────────────────\nlet provider = null;\nfunction initProvider() {\n    if (provider) return provider;\n    if (!ALCHEMY_API_KEY) {\n        throw new Error(\"ALCHEMY_API_KEY is not set\");\n    }\n    provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.providers.JsonRpcProvider(ALCHEMY_API_URL);\n    return provider;\n}\n// ─────────────────────────────────────────────────────────────────────────────\n// Helpers\n// ─────────────────────────────────────────────────────────────────────────────\n/**\n * Save results to file for persistence\n */ async function saveResultsToFile(implementationId, timestamp, result) {\n    try {\n        // Create directory if it doesn't exist\n        const dir = path__WEBPACK_IMPORTED_MODULE_3___default().dirname(RESULTS_FILE_PATH);\n        if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        // Read existing results or create new object\n        let results = {};\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            results = JSON.parse(fileContent);\n        }\n        // Add new result\n        if (!results[implementationId]) {\n            results[implementationId] = {};\n        }\n        // Convert BigNumber to string for JSON storage (if applicable)\n        const resultToSave = {\n            ...result,\n            timestamp: new Date().toISOString()\n        };\n        results[implementationId][timestamp] = resultToSave;\n        // Write back to file\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(RESULTS_FILE_PATH, JSON.stringify(results, null, 2));\n        console.log(`Results saved to ${RESULTS_FILE_PATH}`);\n    } catch (error) {\n        console.error(\"Error saving results to file:\", error);\n    }\n}\n/**\n * Get previous results from cache file\n */ function getPreviousResults() {\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            return JSON.parse(fileContent);\n        }\n    } catch (error) {\n        console.error(\"Error reading previous results:\", error);\n    }\n    return {};\n}\n/** Look up the block number for a UNIX timestamp (seconds) via Etherscan */ async function getBlockNumberAtTimestamp(timestamp) {\n    const resp = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(ETHERSCAN_API_URL, {\n        params: {\n            module: \"block\",\n            action: \"getblocknobytime\",\n            timestamp,\n            closest: \"before\",\n            apikey: ETHERSCAN_API_KEY\n        }\n    });\n    if (resp.data.status !== \"1\") {\n        throw new Error(`Etherscan error: ${resp.data.message}`);\n    }\n    return parseInt(resp.data.result);\n}\n/**\n * Enumerate all BAYC holders by calling ownerOf(tokenId) for each ID = 1..N.\n * Performs N+1 on-chain calls at the given block.\n */ async function getBAYCHoldersDirect(blockNumber) {\n    console.log(`☑ Getting totalSupply() at block ${blockNumber}`);\n    // Create contract instance with provider\n    const baycContract = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.Contract(BAYC_CONTRACT_ADDRESS, BAYC_ERC721_ABI, initProvider());\n    const totalSupplyBN = await baycContract.totalSupply({\n        blockTag: blockNumber\n    });\n    const totalSupply = totalSupplyBN.toNumber();\n    console.log(`☑ totalSupply = ${totalSupply}`);\n    console.log(`Processing all ${totalSupply} tokens (this may take a while)`);\n    const holders = new Set();\n    for(let tokenId = 1; tokenId <= totalSupply; tokenId++){\n        try {\n            const owner = await baycContract.ownerOf(tokenId, {\n                blockTag: blockNumber\n            });\n            holders.add(owner.toLowerCase());\n        } catch (err) {\n            console.warn(`⚠ ownerOf(${tokenId}) failed: ${err.message}`);\n        }\n        if (tokenId % 10 === 0 || tokenId === totalSupply) {\n            console.log(`  → ownerOf calls: ${tokenId}/${totalSupply}`);\n        }\n    }\n    return Array.from(holders).filter((addr)=>addr !== \"0x0000000000000000000000000000000000000000\");\n}\n/**\n * Get ETH balance for an address using basic RPC call\n */ async function getEthBalance(address, blockNumber) {\n    try {\n        const p = initProvider();\n        const balance = await p.getBalance(address, blockNumber);\n        return balance;\n    } catch (error) {\n        console.error(`Error getting balance for ${address}:`, error.message);\n        return ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0);\n    }\n}\n/**\n * Get all ETH balances using individual RPC calls\n */ async function getAllBalances(addresses, blockNumber) {\n    console.log(`Getting balances for ${addresses.length} addresses using individual RPC calls`);\n    let totalBalance = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0);\n    let processedCount = 0;\n    // Process addresses in smaller batches to show progress\n    const batchSize = 10;\n    for(let i = 0; i < addresses.length; i += batchSize){\n        const batch = addresses.slice(i, Math.min(i + batchSize, addresses.length));\n        console.log(`Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(addresses.length / batchSize)} (${batch.length} addresses)`);\n        // Get balances sequentially for this batch\n        for (const address of batch){\n            const balance = await getEthBalance(address, blockNumber);\n            totalBalance = totalBalance.add(balance);\n            processedCount++;\n        }\n        console.log(`Processed ${processedCount}/${addresses.length} addresses so far`);\n    }\n    return totalBalance;\n}\n// ─────────────────────────────────────────────────────────────────────────────\n// Main handler\n// ─────────────────────────────────────────────────────────────────────────────\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { timestamp, useCache } = req.body;\n        if (!timestamp) {\n            return res.status(400).json({\n                error: \"Timestamp is required\"\n            });\n        }\n        // Check if we have cached results\n        if (useCache !== false) {\n            const previousResults = getPreviousResults();\n            const cachedResult = previousResults?.[\"basic\"]?.[timestamp];\n            if (cachedResult) {\n                console.log(`Using cached result for timestamp ${timestamp}`);\n                return res.status(200).json({\n                    ...cachedResult,\n                    fromCache: true\n                });\n            }\n        }\n        const startTs = Date.now();\n        // 1) Get block for timestamp\n        const blockNumber = await getBlockNumberAtTimestamp(timestamp);\n        console.log(`🚀 Block for ts ${timestamp} → #${blockNumber}`);\n        // 2) Enumerate holders directly\n        const holders = await getBAYCHoldersDirect(blockNumber);\n        console.log(`🎉 Found ${holders.length} unique holders`);\n        // 3) Get ETH balances using individual RPC calls\n        console.log(`⏳ Fetching balances for ${holders.length} addresses...`);\n        const totalBalance = await getAllBalances(holders, blockNumber);\n        // 4) Format and respond\n        const totalEth = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.formatEther(totalBalance);\n        const executionTime = Date.now() - startTs;\n        console.log(`✅ Completed in ${(executionTime / 1000).toFixed(1)}s`);\n        const result = {\n            totalEth,\n            holderCount: holders.length,\n            sampledHolders: holders.length,\n            executionTime,\n            block: blockNumber,\n            implementation: \"basic\"\n        };\n        // Save results for persistence\n        await saveResultsToFile(\"basic\", timestamp, result);\n        return res.status(200).json(result);\n    } catch (err) {\n        console.error(\"❌ API error\", err);\n        return res.status(500).json({\n            error: err.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/implementations/basic.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fbasic&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fbasic.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();