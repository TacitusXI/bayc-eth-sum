"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/implementations/multicall";
exports.ids = ["pages/api/implementations/multicall"];
exports.modules = {

/***/ "ethers":
/*!*************************!*\
  !*** external "ethers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("ethers");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fmulticall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fmulticall.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fmulticall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fmulticall.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/implementations/multicall.js */ \"(api)/./pages/api/implementations/multicall.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/implementations/multicall\",\n        pathname: \"/api/implementations/multicall\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_implementations_multicall_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcGxlbWVudGF0aW9ucyUyRm11bHRpY2FsbCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGaW1wbGVtZW50YXRpb25zJTJGbXVsdGljYWxsLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3FFO0FBQ3JFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxvRUFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsb0VBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF5Yy1ldGgtc3VtLz9mZDQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvaW1wbGVtZW50YXRpb25zL211bHRpY2FsbC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2ltcGxlbWVudGF0aW9ucy9tdWx0aWNhbGxcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pbXBsZW1lbnRhdGlvbnMvbXVsdGljYWxsXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fmulticall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fmulticall.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/implementations/multicall.js":
/*!************************************************!*\
  !*** ./pages/api/implementations/multicall.js ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"ethers\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_1__]);\naxios__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Multicall implementation - batches ETH balance queries for maximum efficiency\n\n\n\n\n// Constants\nconst BAYC_CONTRACT_ADDRESS = \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\";\nconst ETHERSCAN_API_URL = \"https://api.etherscan.io/api\";\nconst ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || \"\";\nconst ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY || \"\";\nconst ALCHEMY_API_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`;\n// Multicall Contract Addresses\nconst MULTICALL_ADDRESS = \"0xcA11bde05977b3631167028862bE2a173976CA11\"; // Multicall3 contract\n// ABI for Multicall3\nconst MULTICALL_ABI = [\n    \"function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)\",\n    \"function blockAndAggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)\",\n    \"function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)\",\n    \"function getBlockNumber() view returns (uint256 blockNumber)\",\n    \"function getCurrentBlockCoinbase() view returns (address coinbase)\",\n    \"function getCurrentBlockDifficulty() view returns (uint256 difficulty)\",\n    \"function getCurrentBlockGasLimit() view returns (uint256 gaslimit)\",\n    \"function getCurrentBlockTimestamp() view returns (uint256 timestamp)\",\n    \"function getEthBalance(address addr) view returns (uint256 balance)\",\n    \"function getLastBlockHash() view returns (bytes32 blockHash)\",\n    \"function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) view returns (tuple(bool success, bytes returnData)[] returnData)\",\n    \"function aggregate3Value(tuple(address target, bool allowFailure, bytes callData, uint256 value)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)\",\n    \"function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) view returns (tuple(bool success, bytes returnData)[] returnData)\",\n    \"function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)\"\n];\n// Graph API endpoint for BAYC data\nconst GRAPH_URL = process.env.BAYC_SUBGRAPH_URL;\n// Static provider as reliable fallback\nconst STATIC_PROVIDER = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.providers.StaticJsonRpcProvider(ALCHEMY_API_URL);\n// Results storage - persist between restarts\nconst RESULTS_FILE_PATH = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"results.json\");\n// Removed public RPC endpoints since we're only using Alchemy now\n// Fallback data for when network is unavailable\nconst FALLBACK_DEMO_DATA = {\n    // Example timestamp -> block mapping\n    blocks: {\n        \"1651363200\": 14723000,\n        \"1609459200\": 11565019,\n        \"1577836800\": 9193266,\n        \"1546300800\": 6988614 // Jan 1, 2019\n    },\n    // Sample addresses for demo\n    sampleHolders: [\n        \"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\",\n        \"0xb88F61E6FbdA83fbfffAbE364112137480398018\",\n        \"0x0315FA3813Ff4999C264641B202d0D2B21df139C\",\n        \"0xA858DDc0445d8131daC4d1DE01f834ffcbA52Ef1\",\n        \"0x1b523DC1cB8B17B0170aa9234cA1CFF3E1Ea36bF\"\n    ]\n};\n// Provider and multicall contract initialization\nlet provider = null;\nlet multicallContract = null;\n/**\n * Initialize provider with Alchemy only\n */ const initProvider = ()=>{\n    if (provider) return provider;\n    console.log(\"Initializing provider...\");\n    if (ALCHEMY_API_KEY) {\n        try {\n            console.log(\"Using Alchemy provider\");\n            provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.providers.StaticJsonRpcProvider(ALCHEMY_API_URL);\n            return provider;\n        } catch (error) {\n            console.error(\"Failed to create Alchemy provider:\", error.message);\n            provider = null;\n        }\n    } else {\n        console.error(\"No Alchemy API key provided!\");\n    }\n    console.log(\"Using static provider as last resort\");\n    provider = STATIC_PROVIDER;\n    return provider;\n};\n/**\n * Initialize Multicall contract\n */ const initMulticall = ()=>{\n    if (multicallContract) return multicallContract;\n    const p = provider || initProvider();\n    if (!p) {\n        console.error(\"Failed to initialize provider for multicall contract\");\n        return null;\n    }\n    try {\n        multicallContract = new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.Contract(MULTICALL_ADDRESS, MULTICALL_ABI, p);\n        console.log(\"Multicall contract initialized\");\n        return multicallContract;\n    } catch (error) {\n        console.error(\"Failed to initialize multicall contract:\", error.message);\n        return null;\n    }\n};\n// Initialize provider and multicall contract\nprovider = initProvider();\nmulticallContract = initMulticall();\n/**\n * Check if we have fallback data for this timestamp\n */ function hasFallbackData(timestamp) {\n    return timestamp in FALLBACK_DEMO_DATA.blocks || Object.keys(FALLBACK_DEMO_DATA.blocks).some((t)=>Math.abs(parseInt(t) - timestamp) < 86400);\n}\n/**\n * Get closest fallback block number\n */ function getFallbackBlockNumber(timestamp) {\n    if (timestamp in FALLBACK_DEMO_DATA.blocks) {\n        return FALLBACK_DEMO_DATA.blocks[timestamp];\n    }\n    const timestamps = Object.keys(FALLBACK_DEMO_DATA.blocks).map(Number);\n    let closest = timestamps[0];\n    let minDiff = Math.abs(closest - timestamp);\n    for(let i = 1; i < timestamps.length; i++){\n        const diff = Math.abs(timestamps[i] - timestamp);\n        if (diff < minDiff) {\n            minDiff = diff;\n            closest = timestamps[i];\n        }\n    }\n    return FALLBACK_DEMO_DATA.blocks[closest];\n}\n/**\n * Find block number at specific timestamp using binary search\n */ async function getBlockNumberAtTimestamp(timestamp) {\n    try {\n        // Binary search implementation\n        let low = 0;\n        let high = await provider.getBlockNumber();\n        let result = high;\n        console.log(`Finding block at or after timestamp ${timestamp} using binary search...`);\n        while(low <= high){\n            const mid = Math.floor((low + high) / 2);\n            const block = await provider.getBlock(mid);\n            if (!block) break;\n            if (block.timestamp < timestamp) {\n                low = mid + 1;\n            } else {\n                result = mid;\n                high = mid - 1;\n            }\n        }\n        console.log(`Found block #${result} for timestamp ${timestamp}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error in binary search for block:\", error);\n        // Fallback to Etherscan API\n        try {\n            console.log(\"Falling back to Etherscan API for block number...\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(ETHERSCAN_API_URL, {\n                params: {\n                    module: \"block\",\n                    action: \"getblocknobytime\",\n                    timestamp,\n                    closest: \"before\",\n                    apikey: ETHERSCAN_API_KEY\n                }\n            });\n            if (response.data.status !== \"1\") {\n                throw new Error(`Etherscan API error: ${response.data.message}`);\n            }\n            return parseInt(response.data.result);\n        } catch (secondaryError) {\n            console.error(\"Etherscan fallback failed:\", secondaryError);\n            // Use fallback data if available\n            if (hasFallbackData(timestamp)) {\n                console.log(`Using fallback block data for timestamp ${timestamp}`);\n                return getFallbackBlockNumber(timestamp);\n            }\n            throw error;\n        }\n    }\n}\n/**\n * Get BAYC holders at a specific block by cursor-paging through tokens → owner\n */ async function getBAYCHoldersAtBlock(blockNumber) {\n    try {\n        console.log(`Querying The Graph for BAYC holders at block ${blockNumber}…`);\n        const PAGE_SIZE = 1000;\n        let lastId = \"\"; // cursor: start before the first token\n        const holders = new Set();\n        const QUERY = `\n      query holders($block: Int!, $lastId: String!) {\n        tokens(\n          first: ${PAGE_SIZE},\n          where: { id_gt: $lastId },\n          block: { number: $block },\n          orderBy: id,\n          orderDirection: asc\n        ) {\n          id\n          owner { id }\n        }\n      }\n    `;\n        while(true){\n            console.log(`Fetching tokens after id='${lastId}'…`);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(GRAPH_URL, {\n                query: QUERY,\n                variables: {\n                    block: blockNumber,\n                    lastId\n                }\n            });\n            if (response.data.errors) {\n                console.error(\"GraphQL errors:\", response.data.errors);\n                throw new Error(\"GraphQL query failed\");\n            }\n            const tokens = response.data.data.tokens;\n            if (!tokens.length) {\n                console.log(\"No more tokens to fetch\");\n                break;\n            }\n            // Add each owner to our Set\n            tokens.forEach((t)=>holders.add(t.owner.id.toLowerCase()));\n            // Advance cursor to the last token ID of this page\n            lastId = tokens[tokens.length - 1].id;\n            console.log(`  → Fetched ${tokens.length} tokens; unique owners so far: ${holders.size}`);\n        }\n        console.log(`Found ${holders.size} total unique BAYC holders`);\n        return Array.from(holders);\n    } catch (error) {\n        console.error(\"Error fetching BAYC holders via subgraph:\", error);\n        // fallback to transfer-history method\n        return getHoldersFromTokenTransfers(blockNumber);\n    }\n}\n/**\n * Fallback method to get holders from token transfers\n */ async function getHoldersFromTokenTransfers(blockNumber) {\n    try {\n        console.log(\"Falling back to token transfers method\");\n        // Track ownership using transfer history\n        const ownershipMap = new Map();\n        let page = 1;\n        let hasMoreData = true;\n        while(hasMoreData && page <= 5){\n            // Fetch token transfers from Etherscan\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(ETHERSCAN_API_URL, {\n                params: {\n                    module: \"account\",\n                    action: \"tokennfttx\",\n                    contractaddress: BAYC_CONTRACT_ADDRESS,\n                    page,\n                    offset: 100,\n                    sort: \"asc\",\n                    apikey: ETHERSCAN_API_KEY\n                }\n            });\n            if (response.data.status !== \"1\") {\n                console.error(`Etherscan API error: ${response.data.message}`);\n                break;\n            }\n            const transfers = response.data.result;\n            console.log(`Retrieved ${transfers.length} transfers (page ${page})`);\n            if (transfers.length === 0) {\n                hasMoreData = false;\n                break;\n            }\n            // Process transfers\n            for (const transfer of transfers){\n                // Skip transfers after our target block\n                if (parseInt(transfer.blockNumber) > blockNumber) {\n                    hasMoreData = false;\n                    break;\n                }\n                const tokenId = transfer.tokenID;\n                const from = transfer.from.toLowerCase();\n                const to = transfer.to.toLowerCase();\n                // Skip token minting (from zero address)\n                if (from !== \"0x0000000000000000000000000000000000000000\") {\n                    // Remove token from previous owner\n                    if (ownershipMap.has(from)) {\n                        ownershipMap.get(from).delete(tokenId);\n                        // If the owner has no more tokens, remove them from the map\n                        if (ownershipMap.get(from).size === 0) {\n                            ownershipMap.delete(from);\n                        }\n                    }\n                }\n                // Add token to new owner\n                if (!ownershipMap.has(to)) {\n                    ownershipMap.set(to, new Set());\n                }\n                ownershipMap.get(to).add(tokenId);\n            }\n            page++;\n        }\n        // Extract holders at this block\n        const holders = Array.from(ownershipMap.keys()).filter((address)=>address !== \"0x0000000000000000000000000000000000000000\");\n        console.log(`Found ${holders.length} BAYC holders from historical transfers`);\n        return holders;\n    } catch (error) {\n        console.error(\"Error with token transfers method:\", error);\n        return FALLBACK_DEMO_DATA.sampleHolders;\n    }\n}\n/**\n * Get ETH balances for multiple addresses in a single multicall\n * This is the key optimization of this implementation\n */ async function getEthBalancesMulticall(addresses, blockNumber) {\n    if (!multicallContract) {\n        multicallContract = initMulticall();\n        if (!multicallContract) {\n            throw new Error(\"Failed to initialize multicall contract\");\n        }\n    }\n    try {\n        console.log(`Getting ETH balances for ${addresses.length} addresses with Multicall...`);\n        // Break addresses into chunks of 500 to avoid gas limit issues\n        const chunkSize = 500;\n        const balances = [];\n        for(let i = 0; i < addresses.length; i += chunkSize){\n            const chunk = addresses.slice(i, i + chunkSize);\n            console.log(`Processing chunk ${Math.floor(i / chunkSize) + 1}/${Math.ceil(addresses.length / chunkSize)} (${chunk.length} addresses)`);\n            // Create calls array for multicall\n            const calls = chunk.map((address)=>({\n                    target: MULTICALL_ADDRESS,\n                    allowFailure: true,\n                    callData: multicallContract.interface.encodeFunctionData(\"getEthBalance\", [\n                        address\n                    ])\n                }));\n            // Execute multicall\n            const results = await multicallContract.aggregate3(calls, {\n                blockTag: blockNumber\n            });\n            // Process results\n            for(let j = 0; j < results.length; j++){\n                const result = results[j];\n                if (result.success) {\n                    try {\n                        const balance = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.defaultAbiCoder.decode([\n                            \"uint256\"\n                        ], result.returnData)[0];\n                        balances.push(balance);\n                    } catch (error) {\n                        console.error(`Error decoding balance result for address ${chunk[j]}:`, error.message);\n                        balances.push(ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0));\n                    }\n                } else {\n                    console.warn(`Failed to get balance for address ${chunk[j]}`);\n                    balances.push(ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0));\n                }\n            }\n        }\n        return balances;\n    } catch (error) {\n        console.error(\"Error in multicall getEthBalances:\", error);\n        // Fallback to regular balance fetching if multicall fails\n        console.log(\"Multicall failed, falling back to individual balance queries...\");\n        return getFallbackBalances(addresses, blockNumber);\n    }\n}\n/**\n * Fallback method to get balances individually if multicall fails\n */ async function getFallbackBalances(addresses, blockNumber) {\n    console.log(`Getting balances individually for ${addresses.length} addresses...`);\n    const balances = [];\n    const batchSize = 10; // Process in small batches\n    for(let i = 0; i < addresses.length; i += batchSize){\n        const batch = addresses.slice(i, i + batchSize);\n        // Process batch concurrently\n        const batchResults = await Promise.all(batch.map(async (address)=>{\n            try {\n                return await provider.getBalance(address, blockNumber);\n            } catch (error) {\n                console.error(`Error getting balance for ${address}:`, error.message);\n                return ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0);\n            }\n        }));\n        balances.push(...batchResults);\n        if (i % 50 === 0 && i > 0) {\n            console.log(`Processed ${i}/${addresses.length} addresses...`);\n        }\n    }\n    return balances;\n}\n/**\n * Save results to file for persistence\n */ async function saveResultsToFile(implementationId, timestamp, result) {\n    try {\n        // Create directory if it doesn't exist\n        const dir = path__WEBPACK_IMPORTED_MODULE_3___default().dirname(RESULTS_FILE_PATH);\n        if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        // Read existing results or create new object\n        let results = {};\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            results = JSON.parse(fileContent);\n        }\n        // Add new result\n        if (!results[implementationId]) {\n            results[implementationId] = {};\n        }\n        // Convert BigNumber to string for JSON storage\n        const resultToSave = {\n            ...result,\n            totalWei: result.totalWei.toString(),\n            executionTime: result.executionTime,\n            timestamp: new Date().toISOString()\n        };\n        results[implementationId][timestamp] = resultToSave;\n        // Write back to file\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(RESULTS_FILE_PATH, JSON.stringify(results, null, 2));\n        console.log(`Results saved to ${RESULTS_FILE_PATH}`);\n    } catch (error) {\n        console.error(\"Error saving results to file:\", error);\n    }\n}\n/**\n * Get previous results from cache file\n */ function getPreviousResults() {\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(RESULTS_FILE_PATH)) {\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(RESULTS_FILE_PATH, \"utf8\");\n            return JSON.parse(fileContent);\n        }\n    } catch (error) {\n        console.error(\"Error reading previous results:\", error);\n    }\n    return {};\n}\n/**\n * Get total ETH value of all BAYC holders\n */ async function getTotalEthValueOfHolders(timestamp) {\n    const startTime = Date.now();\n    try {\n        // Step 1: Get block number at timestamp\n        const blockNumber = await getBlockNumberAtTimestamp(timestamp);\n        console.log(`Using block number ${blockNumber} for timestamp ${timestamp}`);\n        // Step 2: Get BAYC holders at that block\n        const holders = await getBAYCHoldersAtBlock(blockNumber);\n        console.log(`Found ${holders.length} BAYC holders at this block`);\n        // Step 3: Get ETH balances of all holders\n        const balances = await getEthBalancesMulticall(holders, blockNumber);\n        console.log(`Retrieved ${balances.length} balances`);\n        if (balances.length !== holders.length) {\n            console.warn(`Warning: Number of balances (${balances.length}) doesn't match holders (${holders.length})`);\n        }\n        // Step 4: Sum total ETH value\n        const totalWei = balances.reduce((sum, balance)=>sum.add(balance), ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0));\n        const totalEth = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.formatEther(totalWei);\n        const executionTime = Date.now() - startTime;\n        console.log(`Total ETH value: ${totalEth} ETH (execution time: ${executionTime}ms)`);\n        const result = {\n            blockNumber,\n            holderCount: holders.length,\n            totalWei,\n            totalEth,\n            executionTime,\n            method: \"The Graph\",\n            implementation: \"multicall\"\n        };\n        // Save results for persistence\n        await saveResultsToFile(\"multicall\", timestamp, result);\n        return result;\n    } catch (error) {\n        console.error(\"Error calculating total ETH value:\", error);\n        const executionTime = Date.now() - startTime;\n        return {\n            error: error.message,\n            blockNumber: 0,\n            holderCount: 0,\n            totalWei: ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(0),\n            totalEth: \"0\",\n            executionTime,\n            method: \"The Graph (errored)\",\n            implementation: \"multicall\"\n        };\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const { timestamp } = req.body;\n        if (!timestamp) {\n            return res.status(400).json({\n                message: \"Timestamp is required\"\n            });\n        }\n        // Check if we have cached results\n        const previousResults = getPreviousResults();\n        const cachedResult = previousResults?.[\"multicall\"]?.[timestamp];\n        if (cachedResult && req.body.useCache !== false) {\n            console.log(`Using cached result for timestamp ${timestamp}`);\n            // Convert string back to BigNumber for consistency\n            cachedResult.totalWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.BigNumber.from(cachedResult.totalWei);\n            return res.status(200).json({\n                ...cachedResult,\n                fromCache: true\n            });\n        }\n        const result = await getTotalEthValueOfHolders(timestamp);\n        return res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error in multicall API handler:\", error);\n        return res.status(500).json({\n            message: \"Error processing request\",\n            error: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/implementations/multicall.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimplementations%2Fmulticall&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimplementations%2Fmulticall.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();